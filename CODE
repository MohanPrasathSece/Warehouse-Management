package Warehouse;
import java.sql.*;
import java.util.Scanner;

public class WarehouseManagement {

    private static final String URL = "jdbc:mysql://localhost:3306/final";
    private static final String USER = "root";
    private static final String PASSWORD = "0110";
    private static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        
        try (Connection connection = DriverManager.getConnection(URL, USER, PASSWORD)) {
            System.out.println("Connected to the database");

            while (true) {
                System.out.println("\n--- Warehouse Management System ---");
                System.out.println("1. Add Product");
                System.out.println("2. View Products");
                System.out.println("3. Add Supplier");
                System.out.println("4. View Suppliers");
                System.out.println("5. Update Stock");
                System.out.println("6. Add Stock Request");
                System.out.println("7. View Stock Requests");
                System.out.println("8. View Product History");
                System.out.println("9. Exit");
                System.out.print("Choose an option: ");
                
                int option = scanner.nextInt();
                scanner.nextLine(); 
                
                switch (option) {
                    case 1:
                        addProduct(connection);
                        break;
                    case 2:
                        viewProducts(connection);
                        break;
                    case 3:
                        addSupplier(connection);
                        break;
                    case 4:
                        viewSuppliers(connection);
                        break;
                    case 5:
                        updateStock(connection);
                        break;
                    case 6:
                        addStockRequest(connection);
                        break;
                    case 7:
                        viewStockRequests(connection);
                        break;
                    case 8:
                        viewProductHistory(connection);
                        break;
                    case 9:
                        System.out.println("Exiting...");
                        return;
                    default:
                        System.out.println("Invalid option. Please try again.");
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    private static void addProduct(Connection connection) {
        System.out.println("Enter product name:");
        String productName = scanner.nextLine();
        System.out.println("Enter product type:");
        String productType = scanner.nextLine();
        System.out.println("Enter quantity:");
        int quantity = scanner.nextInt();
        System.out.println("Enter price:");
        double price = scanner.nextDouble();
        scanner.nextLine();  // Consume the newline character
        System.out.println("Enter storage requirements:");
        String storageRequirements = scanner.nextLine();

        String query = "INSERT INTO Products (product_name, product_type, quantity, price, storage_requirements) VALUES (?, ?, ?, ?, ?)";

        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, productName);
            preparedStatement.setString(2, productType);
            preparedStatement.setInt(3, quantity);
            preparedStatement.setDouble(4, price);
            preparedStatement.setString(5, storageRequirements);
            int rowsAffected = preparedStatement.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Product added successfully.");
            } else {
                System.out.println("Failed to add product.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void viewProducts(Connection connection) {
        String query = "SELECT * FROM Products";

        try (Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(query)) {

            while (resultSet.next()) {
                System.out.println("Product ID: " + resultSet.getInt("product_id"));
                System.out.println("Product Name: " + resultSet.getString("product_name"));
                System.out.println("Product Type: " + resultSet.getString("product_type"));
                System.out.println("Quantity: " + resultSet.getInt("quantity"));
                System.out.println("Price: " + resultSet.getDouble("price"));
                System.out.println("Storage Requirements: " + resultSet.getString("storage_requirements"));
                System.out.println("-----------------------------");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void addSupplier(Connection connection) {
        System.out.println("Enter supplier name:");
        String supplierName = scanner.nextLine();
        System.out.println("Enter contact name:");
        String contactName = scanner.nextLine();
        System.out.println("Enter contact number:");
        String contactNumber = scanner.nextLine();
        System.out.println("Enter address:");
        String address = scanner.nextLine();

        String query = "INSERT INTO Suppliers (supplier_name, contact_name, contact_number, address) VALUES (?, ?, ?, ?)";

        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, supplierName);
            preparedStatement.setString(2, contactName);
            preparedStatement.setString(3, contactNumber);
            preparedStatement.setString(4, address);
            int rowsAffected = preparedStatement.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Supplier added successfully.");
            } else {
                System.out.println("Failed to add supplier.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void viewSuppliers(Connection connection) {
        String query = "SELECT * FROM Suppliers";

        try (Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(query)) {

            while (resultSet.next()) {
                System.out.println("Supplier ID: " + resultSet.getInt("supplier_id"));
                System.out.println("Supplier Name: " + resultSet.getString("supplier_name"));
                System.out.println("Contact Name: " + resultSet.getString("contact_name"));
                System.out.println("Contact Number: " + resultSet.getString("contact_number"));
                System.out.println("Address: " + resultSet.getString("address"));
                System.out.println("-----------------------------");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void updateStock(Connection connection) {
        System.out.println("Enter product ID to update:");
        int productId = scanner.nextInt();
        System.out.println("Enter new quantity:");
        int newQuantity = scanner.nextInt();
        
        String query = "UPDATE Products SET quantity = ? WHERE product_id = ?";

        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, newQuantity);
            preparedStatement.setInt(2, productId);
            int rowsAffected = preparedStatement.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Stock updated successfully.");
            } else {
                System.out.println("Failed to update stock.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void addStockRequest(Connection connection) {
        System.out.println("Enter product ID:");
        int productId = scanner.nextInt();
        System.out.println("Enter supplier ID:");
        int supplierId = scanner.nextInt();
        System.out.println("Enter request quantity:");
        int requestQuantity = scanner.nextInt();
        scanner.nextLine();  // Consume the newline character
        System.out.println("Enter request date (yyyy-mm-dd hh:mm:ss):");
        String requestDate = scanner.nextLine();
        System.out.println("Enter status:");
        String status = scanner.nextLine();

        String query = "INSERT INTO StockRequests (product_id, supplier_id, request_quantity, request_date, status) VALUES (?, ?, ?, ?, ?)";

        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, productId);
            preparedStatement.setInt(2, supplierId);
            preparedStatement.setInt(3, requestQuantity);
            preparedStatement.setString(4, requestDate);
            preparedStatement.setString(5, status);
            int rowsAffected = preparedStatement.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Stock request added successfully.");
            } else {
                System.out.println("Failed to add stock request.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void viewStockRequests(Connection connection) {
        String query = "SELECT * FROM StockRequests";

        try (Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(query)) {

            while (resultSet.next()) {
                System.out.println("Request ID: " + resultSet.getInt("request_id"));
                System.out.println("Product ID: " + resultSet.getInt("product_id"));
                System.out.println("Supplier ID: " + resultSet.getInt("supplier_id"));
                System.out.println("Request Quantity: " + resultSet.getInt("request_quantity"));
                System.out.println("Request Date: " + resultSet.getString("request_date"));
                System.out.println("Status: " + resultSet.getString("status"));
                System.out.println("-----------------------------");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void viewProductHistory(Connection connection) {
        System.out.println("Enter product ID to view history:");
        int productId = scanner.nextInt();

        String query = "SELECT * FROM ProductHistory WHERE product_id = ?";

        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, productId);
            ResultSet resultSet = preparedStatement.executeQuery();
            
            while (resultSet.next()) {
                System.out.println("History ID: " + resultSet.getInt("history_id"));
                System.out.println("Product ID: " + resultSet.getInt("product_id"));
                System.out.println("Change Type: " + resultSet.getString("change_type"));
                System.out.println("Quantity Change: " + resultSet.getInt("quantity_change"));
                System.out.println("Change Date: " + resultSet.getString("change_date"));
                System.out.println("Notes: " + resultSet.getString("notes"));
                System.out.println("-----------------------------");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
